"use strict";var __awaiter=this&&this.__awaiter||function(thisArg,_arguments,P,generator){function adopt(value){return value instanceof P?value:new P((function(resolve){resolve(value)}))}return new(P||(P=Promise))((function(resolve,reject){function fulfilled(value){try{step(generator.next(value))}catch(e){reject(e)}}function rejected(value){try{step(generator.throw(value))}catch(e){reject(e)}}function step(result){result.done?resolve(result.value):adopt(result.value).then(fulfilled,rejected)}step((generator=generator.apply(thisArg,_arguments||[])).next())}))},__importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{default:mod}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.YouTube=exports.Video=exports.Playlist=exports.Channel=exports.Thumbnail=exports.Util=void 0;const Util_1=__importDefault(require("./Util"));exports.Util=Util_1.default;const Channel_1=__importDefault(require("./Structures/Channel"));exports.Channel=Channel_1.default;const Playlist_1=__importDefault(require("./Structures/Playlist"));exports.Playlist=Playlist_1.default;const Video_1=__importDefault(require("./Structures/Video"));exports.Video=Video_1.default;const Thumbnail_1=__importDefault(require("./Structures/Thumbnail"));exports.Thumbnail=Thumbnail_1.default;const SAFE_SEARCH_COOKIE="PREF=f2=8000000";class YouTube{constructor(){throw new Error(`The ${this.constructor.name} class may not be instantiated!`)}static search(query,options){return __awaiter(this,void 0,void 0,(function*(){if(options||(options={limit:20,type:"video",requestOptions:{}}),!query||"string"!=typeof query)throw new Error(`Invalid search query "${query}"!`);options.type=options.type||"video";const filter="all"===options.type?"":`&sp=${Util_1.default.filter(options.type)}`,url=`https://youtube.com/results?q=${encodeURIComponent(query.trim()).replace(/%20/g,"+")}&hl=en${filter}`,requestOptions=options.safeSearch?Object.assign(Object.assign({},options.requestOptions),{headers:{cookie:"PREF=f2=8000000"}}):{},html=yield Util_1.default.getHTML(url,requestOptions);return Util_1.default.parseSearchResult(html,options)}))}static searchOne(query,type,safeSearch,requestOptions){return type||(type="video"),new Promise(resolve=>{YouTube.search(query,{limit:1,type:type,requestOptions:requestOptions,safeSearch:Boolean(safeSearch)}).then(res=>{if(!res||!res.length)return resolve(null);resolve(res[0])}).catch(()=>{resolve(null)})})}static getPlaylist(url,options){return __awaiter(this,void 0,void 0,(function*(){if(options||(options={limit:100,requestOptions:{}}),!url||"string"!=typeof url)throw new Error(`Expected playlist url, received ${typeof url}!`);Util_1.default.validatePlaylist(url),url=Util_1.default.getPlaylistURL(url);const html=yield Util_1.default.getHTML(`${url}&hl=en`,options&&options.requestOptions);return Util_1.default.getPlaylist(html,options&&options.limit)}))}static getVideo(url,requestOptions){return __awaiter(this,void 0,void 0,(function*(){if(!url)throw new Error("Missing video url");url instanceof Video_1.default&&(url=url.url);const isValid=YouTube.validate(url,"VIDEO");if(!isValid)throw new Error("Invalid video url");const html=yield Util_1.default.getHTML(`${url}&hl=en`,requestOptions);return Util_1.default.getVideo(html)}))}static validate(url,type){if("string"!=typeof url)return!1;switch(type||(type="PLAYLIST"),type){case"PLAYLIST":return YouTube.Regex.PLAYLIST_URL.test(url);case"PLAYLIST_ID":return YouTube.Regex.PLAYLIST_ID.test(url);case"VIDEO":return YouTube.Regex.VIDEO_URL.test(url);case"VIDEO_ID":return YouTube.Regex.VIDEO_ID.test(url);default:return!1}}static isPlaylist(src){try{return Util_1.default.validatePlaylist(src),!0}catch(_a){return!1}}static get Regex(){return{PLAYLIST_URL:Util_1.default.PlaylistURLRegex,PLAYLIST_ID:Util_1.default.PlaylistIDRegex,VIDEO_ID:Util_1.default.VideoIDRegex,VIDEO_URL:Util_1.default.VideoRegex}}}exports.YouTube=YouTube,exports.default=YouTube;